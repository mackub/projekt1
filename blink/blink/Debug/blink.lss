
blink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  0000036c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00802000  00802000  0000036c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000039c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003999  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003304  00000000  00000000  00003dbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000618  00000000  00000000  000070c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000088  00000000  00000000  000076dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002662  00000000  00000000  00007764  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000008a  00000000  00000000  00009dc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00009e50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
   8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
   c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  10:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  14:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  18:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  1c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  20:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  24:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  28:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  2c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  30:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  34:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  38:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  3c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  40:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  44:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  48:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  4c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  50:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  54:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  58:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  5c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  60:	0c 94 34 01 	jmp	0x268	; 0x268 <__vector_24>
  64:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  68:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  6c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  70:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  74:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  78:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  7c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  80:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  84:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  88:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  8c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  90:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  94:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  98:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  9c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  a0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  a4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  a8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  ac:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  b0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  b4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  b8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  bc:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  c0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  c4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  c8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  cc:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  d0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  d4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  d8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  dc:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  e0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  e4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  e8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  ec:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  f0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  f4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  f8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  fc:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 100:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 104:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 108:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 10c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 110:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 114:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 118:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 11c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 120:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 124:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 128:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 12c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 130:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 134:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 138:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 13c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 140:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 144:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 148:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 14c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 150:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 154:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 158:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 15c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 160:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 164:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 168:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 16c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 170:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 174:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 178:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 17c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 180:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 184:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 188:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 18c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 190:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 194:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 198:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 19c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1a0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1a4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1a8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1ac:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1b0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1b4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1b8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1bc:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1c0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1c4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1c8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1cc:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1d0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1d4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1d8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1dc:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1e0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1e4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1e8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1ec:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1f0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1f4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1f8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_clear_bss>:
 20c:	20 e2       	ldi	r18, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	01 c0       	rjmp	.+2      	; 0x216 <.do_clear_bss_start>

00000214 <.do_clear_bss_loop>:
 214:	1d 92       	st	X+, r1

00000216 <.do_clear_bss_start>:
 216:	a5 30       	cpi	r26, 0x05	; 5
 218:	b2 07       	cpc	r27, r18
 21a:	e1 f7       	brne	.-8      	; 0x214 <.do_clear_bss_loop>
 21c:	0e 94 73 01 	call	0x2e6	; 0x2e6 <main>
 220:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <_exit>

00000224 <__bad_interrupt>:
 224:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000228 <PortxInit>:

volatile struct PORTX_t PORTX; 

void PortxInit(void) {
	// sygna³y SS dla wszystkich peryferów na eXtrino XL
	PORTA.OUTSET		=	PIN3_bm | PIN4_bm;					// SPI MEM, OP AMP
 228:	e0 e0       	ldi	r30, 0x00	; 0
 22a:	f6 e0       	ldi	r31, 0x06	; 6
 22c:	88 e1       	ldi	r24, 0x18	; 24
 22e:	85 83       	std	Z+5, r24	; 0x05
	PORTA.DIRSET		=	PIN3_bm | PIN4_bm;					// SPI MEM, OP AMP
 230:	81 83       	std	Z+1, r24	; 0x01
	PORTE.OUTSET		=	PIN3_bm | PIN6_bm | PIN7_bm;		// SD, PORTX, DIGPOT
 232:	e0 e8       	ldi	r30, 0x80	; 128
 234:	f6 e0       	ldi	r31, 0x06	; 6
 236:	88 ec       	ldi	r24, 0xC8	; 200
 238:	85 83       	std	Z+5, r24	; 0x05
	PORTE.DIRSET		=	PIN3_bm | PIN6_bm | PIN7_bm;		// SD, PORTX, DIGPOT
 23a:	81 83       	std	Z+1, r24	; 0x01
	
	PORTC.DIRSET		=	PIN4_bm | PIN5_bm | PIN7_bm;
 23c:	e0 e4       	ldi	r30, 0x40	; 64
 23e:	f6 e0       	ldi	r31, 0x06	; 6
 240:	80 eb       	ldi	r24, 0xB0	; 176
 242:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRCLR		=	PIN6_bm;
 244:	80 e4       	ldi	r24, 0x40	; 64
 246:	82 83       	std	Z+2, r24	; 0x02
	PORTC.OUTCLR		=	PIN7_bm | PIN6_bm | PIN5_bm | PIN4_bm;
 248:	80 ef       	ldi	r24, 0xF0	; 240
 24a:	86 83       	std	Z+6, r24	; 0x06
	PORTC.REMAP			=	PORT_SPI_bm;						// zamiana miejscami SCK i MOSI
 24c:	80 e2       	ldi	r24, 0x20	; 32
 24e:	86 87       	std	Z+14, r24	; 0x0e
	SPIC.CTRL			=	SPI_ENABLE_bm|
 250:	e0 ec       	ldi	r30, 0xC0	; 192
 252:	f8 e0       	ldi	r31, 0x08	; 8
 254:	8f e5       	ldi	r24, 0x5F	; 95
 256:	80 83       	st	Z, r24
							//SPI_CLK2X_bm|
							SPI_PRESCALER_DIV128_gc;
	
	#if PORTX_AUTOREFRESH
		// przerwania
		SPIC.INTCTRL	=	SPI_INTLVL_LO_gc;
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	81 83       	std	Z+1, r24	; 0x01
		PMIC.CTRL       =   PMIC_HILVLEN_bm|					// w³¹czenie przerwañ o priorytecie HI
 25c:	87 e0       	ldi	r24, 0x07	; 7
 25e:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
							PMIC_MEDLVLEN_bm|					// w³¹czenie przerwañ o priorytecie MED
							PMIC_LOLVLEN_bm;					// w³¹czenie przerwañ o priorytecie LO
		sei();
 262:	78 94       	sei
		SPIC.DATA		=	0;									// pierwsza transmisja, zerowanie
 264:	13 82       	std	Z+3, r1	; 0x03
 266:	08 95       	ret

00000268 <__vector_24>:
	for(uint8_t i = 255; i; i--);								// opónienie
	PORTE.OUTSET	=	PIN6_bm;
}
#endif

ISR(SPIC_INT_vect) {
 268:	1f 92       	push	r1
 26a:	0f 92       	push	r0
 26c:	0f b6       	in	r0, 0x3f	; 63
 26e:	0f 92       	push	r0
 270:	11 24       	eor	r1, r1
 272:	0b b6       	in	r0, 0x3b	; 59
 274:	0f 92       	push	r0
 276:	2f 93       	push	r18
 278:	8f 93       	push	r24
 27a:	9f 93       	push	r25
 27c:	af 93       	push	r26
 27e:	bf 93       	push	r27
 280:	ef 93       	push	r30
 282:	ff 93       	push	r31
	PORTE.OUTSET	=	PIN6_bm;								// chip deselect
 284:	a0 e8       	ldi	r26, 0x80	; 128
 286:	b6 e0       	ldi	r27, 0x06	; 6
 288:	20 e4       	ldi	r18, 0x40	; 64
 28a:	15 96       	adiw	r26, 0x05	; 5
 28c:	2c 93       	st	X, r18
 28e:	15 97       	sbiw	r26, 0x05	; 5
	PORTX.OUT	   |=	PORTX.OUTSET;
 290:	e0 e0       	ldi	r30, 0x00	; 0
 292:	f0 e2       	ldi	r31, 0x20	; 32
 294:	92 81       	ldd	r25, Z+2	; 0x02
 296:	81 81       	ldd	r24, Z+1	; 0x01
 298:	89 2b       	or	r24, r25
 29a:	81 83       	std	Z+1, r24	; 0x01
	PORTX.OUT	   &=  ~PORTX.OUTCLR;
 29c:	83 81       	ldd	r24, Z+3	; 0x03
 29e:	91 81       	ldd	r25, Z+1	; 0x01
 2a0:	80 95       	com	r24
 2a2:	89 23       	and	r24, r25
 2a4:	81 83       	std	Z+1, r24	; 0x01
	PORTX.OUT	   ^=	PORTX.OUTTGL;
 2a6:	94 81       	ldd	r25, Z+4	; 0x04
 2a8:	81 81       	ldd	r24, Z+1	; 0x01
 2aa:	89 27       	eor	r24, r25
 2ac:	81 83       	std	Z+1, r24	; 0x01
	PORTX.OUTSET	=	0;
 2ae:	12 82       	std	Z+2, r1	; 0x02
	PORTX.OUTCLR	=	0;
 2b0:	13 82       	std	Z+3, r1	; 0x03
	PORTX.OUTTGL	=	0;
 2b2:	14 82       	std	Z+4, r1	; 0x04
	PORTE.OUTCLR	=	PIN6_bm;								// chip select
 2b4:	16 96       	adiw	r26, 0x06	; 6
 2b6:	2c 93       	st	X, r18
	PORTX.IN		=	SPIC.DATA;
 2b8:	a0 ec       	ldi	r26, 0xC0	; 192
 2ba:	b8 e0       	ldi	r27, 0x08	; 8
 2bc:	13 96       	adiw	r26, 0x03	; 3
 2be:	8c 91       	ld	r24, X
 2c0:	13 97       	sbiw	r26, 0x03	; 3
 2c2:	80 83       	st	Z, r24
	SPIC.DATA		=	PORTX.OUT;
 2c4:	81 81       	ldd	r24, Z+1	; 0x01
 2c6:	13 96       	adiw	r26, 0x03	; 3
 2c8:	8c 93       	st	X, r24
 2ca:	ff 91       	pop	r31
 2cc:	ef 91       	pop	r30
 2ce:	bf 91       	pop	r27
 2d0:	af 91       	pop	r26
 2d2:	9f 91       	pop	r25
 2d4:	8f 91       	pop	r24
 2d6:	2f 91       	pop	r18
 2d8:	0f 90       	pop	r0
 2da:	0b be       	out	0x3b, r0	; 59
 2dc:	0f 90       	pop	r0
 2de:	0f be       	out	0x3f, r0	; 63
 2e0:	0f 90       	pop	r0
 2e2:	1f 90       	pop	r1
 2e4:	18 95       	reti

000002e6 <main>:
			_delay_ms(100);
			} else {                    // jeli przycisk FLIP wciniêty
			_delay_ms(50);
		}
	}*/
	PortxInit();                // inicjalizacja PORTX
 2e6:	0e 94 14 01 	call	0x228	; 0x228 <PortxInit>
	
	while(1) {
		PORTX.OUT    =    PORTX.IN;
 2ea:	e0 e0       	ldi	r30, 0x00	; 0
 2ec:	f0 e2       	ldi	r31, 0x20	; 32
 2ee:	80 81       	ld	r24, Z
 2f0:	81 83       	std	Z+1, r24	; 0x01
 2f2:	fd cf       	rjmp	.-6      	; 0x2ee <main+0x8>

000002f4 <_exit>:
 2f4:	f8 94       	cli

000002f6 <__stop_program>:
 2f6:	ff cf       	rjmp	.-2      	; 0x2f6 <__stop_program>
